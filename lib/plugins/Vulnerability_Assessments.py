from __future__ import print_function
from lib.core.common import *
from subprocess import *


class Vulnerability_Assessments:
    def __init__(self):
        return 0

    def check_apache(self):
        suspicious, malice = False, False
        try:
            shell_process = os.popen("cat /etc/passwd | grep '/bin/bash' | awk -F: '$4==0 {print $1}' 2>/dev/null").read().splitlines()
            for user in shell_process:
                if user.replace("\n", "") != 'root':
                    malice_result(self.name, u'特权组账户安全扫描', '/etc/passwd', '',
                                  u'存在特权组用户%s' % user.replace("\n", ""),
                                  u'[1]cat /etc/passwd', u'可疑', programme=u'vi /etc/passwd #删除用户root特权组或删除用户')
                    suspicious = False
            return suspicious, malice
        except:
            return suspicious, malice

    def run(self):
        print(u'\n开始系统配置漏洞安全扫描')
        file_write(u'\n开始系统配置漏洞安全扫描\n')

        string_output(u' [1]Apache2配置安全扫描')
        suspicious, malice = self.check_apache()
        result_output_tag(suspicious, malice)

        string_output(u' [2]安全扫描')
        suspicious, malice = self.check_gid()
        result_output_tag(suspicious, malice)

        string_output(u' [3]文件权限安全扫描')
        suspicious, malice = self.check_empty()
        result_output_tag(suspicious, malice)

        string_output(u' [4]iptables配置安全扫描')
        suspicious, malice = self.check_sudo()
        result_output_tag(suspicious, malice)

        string_output(u' [5]网络服务配置安全扫描')
        suspicious, malice = self.check_authorized_keys()
        result_output_tag(suspicious, malice)

        string_output(u' [6]账户密码文件扫描')
        suspicious, malice = self.passwd_file_analysis()
        result_output_tag(suspicious, malice)

        # 检测结果输出到文件
        result_output_file(self.name)


if __name__ == '__main__':
    infos = Vulnerability_Assessments()
    infos.run()
    print(u"可疑账户如下：")
    for info in infos.user_malware:
        print(info)