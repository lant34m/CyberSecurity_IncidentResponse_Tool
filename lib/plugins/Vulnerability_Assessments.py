from __future__ import print_function
from lib.core.common import *
from subprocess import *
import os.path


class Vulnerability_Assessments:
    def __init__(self):
        self.user_malware = []
        self.name = u'系统配置漏洞类安全检测'

    def check_apache(self):
        suspicious, malice = False, False
        try:
            apache_installed = os.popen("dpkg-query -W -f='${Status}' apache2 2>/dev/null | grep -c 'ok installed'").read().splitlines()     #dpkg-query查询已安装软件包信息，-f指定输出安装状态
            if not apache_installed:
                malice_result(self.name, u'apache2配置安全审计', '', '', u'apache2安装状态异常', u'[1]apt-file list apache2',
                              u'系统配置异常', programme=u'apt-get update && apt-get upgrade && apt-get apache2 #更新并安装apache2')
                suspicious = False
                result_output_tag(suspicious, malice)
            else:
                apache_autoindex = os.popen("apache2ctl -M 2>/dev/null|grep -c autoindex")
                if not apache_autoindex:
                    malice_result(self.name, u'apache2配置安全审计', '', '',
                                  u'apache2的自动目录功能异常', u'[1]apache2ctl -M | grep autoindex', u'系统配置异常',
                                  programme=u'a2dismod -f autoindex   #禁用apache2的目录浏览功能')
                    suspicious = True
                    result_output_tag(suspicious, malice)
                elif not os.path.exists('/etc/apache2/apache2.conf'):
                    malice_result(self.name, u'apache2配置安全审计', u'/etc/apache2/apache2.conf', '', u'apache2配置文件异常',
                                  u'[1]ls -l /etc/apache2/apache2.conf && cat /etc/apache2/apache2.conf', u'系统配置异常',
                                  programme=u'cd /etc/apache2 && wget https://sources.debian.org/data/main/a/apache2/2.4.10-10/debian/config-dir/apache2.conf    #下载apache2的default模板')
                    suspicious = True
                    result_output_tag(suspicious, malice)
                    #apache2配置文件的相关安全审计
                    apache_versionhidden = os.popen("grep -cP '^ServerSignature\s+Off$' /etc/apache2/apache2.conf")
                    if not apache_versionhidden:
                        malice_result(self.name, u'apache2配置安全审计', u'/etc/apache2/apache2.conf', '',
                                      u'apache2未禁用服务器版本信息显示',
                                      u'[1]cat /etc/apache2/apache2.conf | grep ServerSignature', u'系统配置异常',
                                      programme=u'echo "ServerSignature Off" >> /etc/apache2/apache2.conf   #禁用apache2的服务器版本信息显示')
                        suspicious = False
                        result_output_tag(suspicious, malice)
                    apache_servertokens = os.popen("grep -cP '^ServerTokens\s+Prod$' /etc/apache2/apache2.conf")
                    if not apache_servertokens:
                        malice_result(self.name, u'apache2配置安全审计', u'/etc/apache2/apache2.conf', '',
                                      u'apache2未禁用响应中显示的服务器信息',
                                      u'[1]cat /etc/apache2/apache2.conf | grep ServerTokens', u'系统配置异常',
                                      programme=u'echo "ServerTokens Prod" >> /etc/apache2/apache2.conf   #禁用apache2的响应显示服务器信息')
                        suspicious = False
                        result_output_tag(suspicious, malice)
                    apache_fileetag = os.popen("grep -cP '^FileETag\sNone$' /etc/apache2/apache2.conf")
                    if not apache_fileetag:
                        malice_result(self.name, u'apache2配置安全审计', u'/etc/apache2/apache2.conf', '',
                                      u'apache2的FileETag的缓存文件更新功能异常',
                                      u'[1]cat /etc/apache2/apache2.conf | grep FileETag', u'系统配置异常',
                                      programme=u'echo "FileETag None" >> /etc/apache2/apache2.conf   #关闭apache2的FileETag')
                        suspicious = False
                        result_output_tag(suspicious, malice)
                    apache_dosattackprotect = os.popen("grep -cP '^Timeout 60$' /etc/apache2/apache2.conf")
                    if not apache_dosattackprotect:
                        malice_result(self.name, u'apache2配置安全审计', u'/etc/apache2/apache2.conf', '',
                                      u'apache2的Dos攻击防护异常', u'[1]cat /etc/apache2/apache2.conf | grep Timeout',
                                      u'系统配置异常',
                                      programme=u'sed -i "s/Timeout 300/Timeout 60/" /etc/apache2/apache2.conf   #限制响应时间，防止DosAttack')
                        suspicious = True
                        result_output_tag(suspicious, malice)
                elif not os.path.exists('/etc/apache2/conf-available/security.conf'):
                    malice_result(self.name, u'apache2配置安全审计', u'/etc/apache2/conf-available/security.conf', '', u'apache2配置文件异常',
                                  u'[1]ls -l /etc/apache2/conf-available/security.conf && cat /etc/apache2/conf-available/security.conf', u'系统配置异常',
                                  programme=u'cd /etc/apache2/conf-available && wget https://sources.debian.org/data/main/a/apache2/2.4.10-10/debian/config-dir/conf-available/security.conf    #下载apache2的security的default模板')
                    suspicious = True
                    result_output_tag(suspicious, malice)
                    apache_rootdirectory = os.popen("grep -cPzo '<Directory\s+/>\nOptions\s+-Indexes\nAllowOverride\s+None\nOrder\s+Deny,Allow\nDeny\s+from\s+all\n</Directory>' /etc/apache2/conf-available/security.conf")
                    if not apache_rootdirectory:
                        malice_result(self.name, u'apache2配置安全审计', u'/etc/apache2/conf-available/security.conf', '', u'apache2的root目录文件覆盖权限异常',
                                      u'[1]cat /etc/apache2/conf-available/security.conf | grep Directory', u'系统配置异常', programme=u'代码过长，详见hardering代码apache2部分')
                        suspicious = True
                        result_output_tag(suspicious, malice)
                    apache_htmldirectory = os.popen("grep -cPzo '<Directory\s+/var/www/html>\nOptions\s+-Indexes\s+-Includes\nAllowOverride\s+None\nOrder\s+Allow,Deny\nAllow\s+from\s+All\n</Directory>\n' /etc/apache2/conf-available/security.conf")
                    if not apache_htmldirectory:
                        malice_result(self.name, u'apache配置安全审计', u'/etc/apache2/conf-available/security.conf', '', u'apache2的html目录文件覆盖权限异常',
                                      u'[1]cat /etc/apache2/conf-available/security.conf | grep Directory', u'系统配置异常', programme=u'代码过长，详见hardering代码apache2部分')
                        suspicious = True
                        result_output_tag(suspicious, malice)
                    apache_httponly_sercureflag = os.popen("grep -cP '^Header\sedit\sSet-Cookie\s\^\(\.\*\)\$\s\$1;HttpOnly;Secure$' /etc/apache2/conf-available/security.conf")
                    if not apache_httponly_sercureflag:
                        malice_result(self.name, u'apache配置安全审计', u'/etc/apache2/conf-available/security.conf', '', u'apache2的http-only和secure flags功能未开启',
                                      u'[1]cat /etc/apache2/conf-available/security.conf | grep HttpOnly && cat /etc/apache2/conf-available/security.conf | grep Secure', u'系统配置异常',
                                      programme=u'echo "Header edit Set-Cookie ^(.*)\$ \$1;HttpOnly;Secure" >> /etc/apache2/conf-available/security.conf    #开启HttpOnly和Secure flags功能')
                        suspicious = True
                        result_output_tag(suspicious, malice)
                    apache_clickjacking = os.popen("grep -cP '^Header\salways\sappend\sX-Frame-Options\sSAMEORIGIN$' /etc/apache2/conf-available/security.conf")
                    if not apache_clickjacking:
                        malice_result(self.name, u'apache配置安全审计', u'/etc/apache2/conf-available/security.conf', '', u'apache2的点击劫持保护未开启',
                                      )


        except:
            return suspicious, malice

    def run(self):
        print(u'\n开始系统配置漏洞安全扫描')
        file_write(u'\n开始系统配置漏洞安全扫描\n')

        string_output(u' [1]Apache2配置安全扫描')
        suspicious, malice = self.check_apache()

        string_output(u' [2]安全扫描')
        suspicious, malice = self.check_gid()
        result_output_tag(suspicious, malice)

        string_output(u' [3]文件权限安全扫描')
        suspicious, malice = self.check_empty()
        result_output_tag(suspicious, malice)

        string_output(u' [4]iptables配置安全扫描')
        suspicious, malice = self.check_sudo()
        result_output_tag(suspicious, malice)

        string_output(u' [5]网络服务配置安全扫描')
        suspicious, malice = self.check_authorized_keys()
        result_output_tag(suspicious, malice)

        string_output(u' [6]账户密码文件扫描')
        suspicious, malice = self.passwd_file_analysis()
        result_output_tag(suspicious, malice)

        # 检测结果输出到文件
        result_output_file(self.name)


if __name__ == '__main__':
    infos = Vulnerability_Assessments()
    infos.run()
    print(u"可疑账户如下：")
    for info in infos.user_malware:
        print(info)